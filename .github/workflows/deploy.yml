name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: victorsoaresho/provavollo:latest

  sonar-analysis-and-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run SonarQube analysis on remote server
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 << 'EOF'
            # Puxa e executa o container do SonarQube temporário
            docker run -d --name sonarqube-temp -p 9000:9000 sonarqube:latest
            sleep 60  # Espera o SonarQube subir

            # Executa análise do código com scanner apontando para esse SonarQube
            # Assumindo que você tenha o scanner instalado ou usando um container
            sonar-scanner \
              -Dsonar.projectKey=your_project_key \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=your_sonar_token \
              || exit 1

            # Para e remove container sonarqube
            docker stop sonarqube-temp
            docker rm sonarqube-temp
          EOF

      - name: Deploy application container remotely
        run: |
          ssh aluno@201.23.3.86 << 'EOF'
            # Para e remove container antigo, se existir
            docker stop app || true
            docker rm app || true

            # Puxa a imagem mais recente do Docker Hub
            docker pull yourdockerhubusername/yourapp:latest

            # Executa a aplicação em container
            docker run -d --name app -p 3000:3000 yourdockerhubusername/yourapp:latest
          EOF
